#!/bin/zsh

# To-do:
# * Add errors for missing argumens
# * Add formatting to index files

# {{{1 _get_block()

_get_block() {
    local -a line_numbers
    line_numbers=( ${(f)"$(rg --line-number '^---$' $1 | cut -d : -f 1)"} )

    if (( $#line_numbers < 2 )); then
        echo 'build-index: cannot get YAML block for' $1 >&2
        return 1
    fi

    local -i block_end=$(( line_numbers[2] - 1 ))
    local -i block_length=$(( line_numbers[2] - line_numbers[1] - 1 ))
    local -a block
    block=( ${(f)"$(cat $1 | head -$block_end | tail -$block_length)"} )

    # Cache `block` in an associative array
    blocks[$1]=${(j:++:)block}
}

# {{{1 Utility functions for `_parse_block`

# {{{2 __check_quotes()

__check_quotes() {
    if [[ $value[1] == "'" ]]; then
        single_quote=1
    elif [[ $value[1] == '"' ]]; then
        double_quote=1
    elif [[ $value[1] == '[' ]]; then
        bracket=1
    fi

    if [[ $value[-1] == "'" && $value[-2] == [^\'] ]]; then
        single_quote=0
    elif [[ $value[-1] == '"' && $value[-2] == [^\\] ]]; then
        double_quote=0
    elif [[ $value[-1] == "]" ]]; then
        bracket=0
    fi
}

# {{{2 __get_indent()

__get_indent() {
    echo ${#${1}%%[^[:space:]]*}
}

# {{{2 __append_to_array()

__append_to_array() {
    if [[ $value[1] == "'" ]]; then
        single_quote=1
    elif [[ $value[1] == '"' ]]; then
        double_quote=1
    elif [[ $value[1] == '[' ]]; then
        bracket=1
    fi

    values+=( $value )
}

# {{{2 __append_to_string()

__append_to_string() {
    if [[ -n $values[-1] ]]; then
        values[-1]="$values[-1] $value"
    else
        values[-1]=$value
    fi
}

# {{{2 __parse_dashed()

__parse_dashed() {
    trap "trap 'unset list_indent' EXIT" EXIT

    # If `list_indent` has not been defined, then this is the first list item.
    # Therefore, set `list_indent` to whatever the `line_indent` of this line
    # is.
    if [[ ! -n $list_indent ]]; then
        declare -gi list_indent=$line_indent
        value=${value##-[[:space:]]##}

        if [[ $value[1] == '[' ]]; then
            echo 'build-index: for key' $1 'in' $2',' \
                'list not allowed within list' >&2
            return 1
        fi

        __append_to_array

    elif (( line_indent < list_indent )); then
        echo 'build-index: for key' $1 'in' $2',' \
            'line outside scope of list' >&2
        return 1

    elif (( line_indent == list_indent )); then
        value=${value##-[[:space:]]##}

        if [[ $value[1] == '[' ]]; then
            echo 'build-index: for key' $1 'in' $2',' \
                'list not allowed within list' >&2
            return 1
        fi

        __append_to_array

    elif (( line_indent > list_indent )); then
        __append_to_string
    fi
}

# {{{2 __bracket_single_quotes()

__bracket_single_quotes() {
    value=${value//\'\'/++}

    if [[ $value[-1] == "'" ]]; then
        value=${value%\'}
        single_quote=0
    fi

    # Because the starting and ending quotes (if there were any on this line)
    # have been stripped, and because escaped quotes have been substituted with
    # something else, if there are any quotes left, that means either that
    # there's no closing quote or that there's an unescaped quote
    if [[ $value =~ "'" ]]; then
        if (( single_quote == 1 )); then
            echo 'build-index: for key' $1 'in' $2',' \
                'closing quote not found' >&2
            return 1
        elif (( single_quote == 0 )); then
            echo 'build-index: for key' $1 'in' $2',' \
                'unescaped single quotes found' >&2
            return 1
        fi
    fi

    value=${value//++/\'}
}

# {{{2 __bracket_double_quotes()

__bracket_double_quotes() {
    value=${value//\\\"/++}

    if [[ $value[-1] == '"' ]]; then
        value=${value%\"}
        double_quote=0
    fi

    # Because the starting and ending quotes (if there were any on this line)
    # have been stripped, and because escaped quotes have been substituted with
    # something else, if there are any quotes left, that means either that
    # there's no closing quote or that there's an unescaped quote
    if [[ $value =~ '"' ]]; then
        if (( double_quote == 1 )); then
            echo 'build-index: for key' $1 'in' $2',' \
                'closing quote not found' >&2
            return 1
        elif (( double_quote == 0 )); then
            echo 'build-index: for key' $1 'in' $2',' \
                'unescaped double quotes found' >&2
            return 1
        fi
    fi

    value=${value//++/\"}
}

# }}}2

# {{{1 _parse_block()

_parse_block() {
    # {{{2 Get values from first line

    # Find the line in the block with the key we're looking for; disregard
    # any lines before this
    local -a block=( ${(s:+:)blocks[$2]} )
    local -i first_line_num=$block[(i)[[:space:]]#$1:([[:space:]]##*)#]

    if (( $first_line_num > $#block )); then
        echo 'build-index: for key' $1 'in' $2',' \
            'key not found' >&2
        return 1
    fi

    # Get indent of the line containing the key; every subsequent line is going
    # to have to be indented at least as much as this line, unless it's part of
    # a properly quoted or bracketed string
    local -i key_indent=$(__get_indent $block[$first_line_num] )

    # Get value (if there is one) and trim whitespace from both ends
    local value=${block[$first_line_num]##[[:space:]]#${1}:([[:space:]]##)#}
    value=${value%%[[:space:]]#}
    local -a values
    values+=( $value )

    # If there is a value on the first line, do not parse subsequent lines
    # beginning with a '- ' as list items
    if [[ -n $value ]]; then
        local -i no_list=1
    else
        local -i no_list=0
    fi

    local -i single_quote=0
    local -i double_quote=0
    local -i bracket=0

__check_quotes

    # {{{2 Get values from subsequent lines

    local -a block_slice=( $block[(( $first_line_num + 1 )),-1] )
    local -i line_indent
    local line
    for line in $block_slice; do
        line_indent=$(__get_indent $line)

        # Trim whitespace from both ends
        value=${line#[[:space:]](#c$line_indent)}
        value=${value%%[[:space:]]#}

        if [[
            no_list -eq 0 &&
            (single_quote -eq 0) &&
            (double_quote -eq 0) &&
            (bracket -eq 0) &&
            $value[1,2] == '- '
        ]]; then

            if [[ $1 == title ]]; then
                echo 'build-index: for key' $1 'in' $2',' \
                    'list not allowed' >&2
                return 1

            elif (( line_indent < key_indent )); then
                echo 'build-index: for key' $1 'in' $2',' \
                    'line outside scope of key' >&2
                return 1

            elif (( line_indent == key_indent )); then
                __parse_dashed $1 $2 || return 1

            elif (( line_indent > key_indent )); then
                __parse_dashed $1 $2 || return 1
            fi

        else
            # If the string is quoted or bracketed, YAML disregards normal
            # indentation rules and always appends subsequent lines to the
            # current value
            if ((
                single_quote == 1 ||
                double_quote == 1 ||
                bracket == 1
            )); then
                __append_to_string || return 1

            elif (( line_indent < key_indent )); then
                echo 'build-index: for key' $1 'in' $2',' \
                    'line outside scope of key' >&2
                return 1

            elif (( line_indent == key_indent )); then
                # If the line has the same indentation as the key, then it
                # either has to be a list item beginning with '- ', which we've
                # already handled, or another key/value pair (in which case
                # we're done parsing)
                if [[ ! -n ${line##[^[\'][^:]#:*} ]]; then
                    break
                else
                    echo 'build-index: for key' $1 'in' $2',' \
                        'key/value pair expected' >&2
                    return 1
                fi

            elif (( line_indent > key_indent )); then
                if [[ -n $list_indent ]]; then
                    if (( line_indent > list_indent )); then
                        __append_to_string || return 1
                    else
                        echo 'build-index: for key' $1 'in' $2',' \
                            'line outside scope of list' >&2
                        return 1
                    fi

                else
                    __append_to_string || return 1
                    # If ever there is an indented line with a value before
                    # there is a list, no list can follow
                    no_list=1

                fi
            fi
        fi

        __check_quotes
    done

# {{{2 Process values

    single_quote=0
    double_quote=0

    # {{{3 Process values with brackets

    if [[ ${values[1][1]} == '[' ]]; then
        if [[ $1 == 'title' ]]; then
            echo 'build-index: for key' $1 'in' $2',' \
                'list not allowed' >&2
            return 1

        elif [[ ${values[-1][-1]} == ']' ]]; then
            value=${${values#'['}%']'}

        else
            echo 'build-index: for key' $1 'in' $2',' \
                'closing bracket not found' >&2
            return 1
        fi

        values=( ${(s:,:)value} )
        local -i index=1
        for value in $values; do
            value=${${value##[[:space:]]#}%%[[:space:]]#}

            if [[ $value[1,2] == '- ' ]]; then
                echo 'build-index: for key' $1 'in' $2',' \
                    'list not allowed within list' >&2
                return 1

            elif [[ $value[1] == "'" && $single_quote -eq 0 ]]; then
                single_quote=1
                value=${value#\'}
                __bracket_single_quotes $1 $2 || return 1

            elif (( single_quote == 1 )); then
                __bracket_single_quotes $1 $2 || return 1

            elif [[ $value[1] == '"' && $double_quote -eq 0 ]]; then
                double_quote=1
                value=${value#\"}
                __bracket_double_quotes $1 $2 || return 1

            elif (( double_quote == 1 )); then
                __bracket_double_quotes $1 $2 || return 1
            fi

            values[$index]=$value
            index=$(( index + 1 ))
        done

        if (( single_quote == 1 || double_quote == 1 )); then
            echo 'build-index: for key' $1 'in' $2',' \
                'closing quote not found' >&2
            return 1
        fi

    # {{{3 Process values with quotes
    else
        # Given the way that values have been collected, any value that starts
        # with a quote but does not end with a quote is breaking YAML parsing
        # rules. If there is both a starting and ending quote, strip off the
        # outside quotes and substitute properly escaped interior quotes with
        # '++'. Then, if any quotes remain, that means that there are unescaped
        # quotes.
        index=1
        for value in $values; do
            if [[ $value[1] == "'" ]]; then
                if [[ $value[-1] == "'" ]]; then
                    value=${${value#\'}%\'}
                    value=${value//\'\'/++}

                    if [[ $value =~ "'" ]]; then
                        echo 'build-index: for key' $1 'in' $2',' \
                            'unescaped single quotes found' >&2
                        return 1
                    fi

                    value=${value//++/\'}
                    values[$index]=$value

                else
                    echo 'build-index: for key' $1 'in' $2',' \
                        'closing quote not found' >&2
                    return 1
                fi

            elif [[ $value[1] == '"' ]]; then
                value=${value//\\\"/++}
                if [[ $value[-1] == '"' ]]; then
                    value=${${value#\"}%\"}

                    if [[ $value =~ '"' ]]; then
                        echo 'build-index: for key' $1 'in' $2',' \
                            'unescaped double quotes found' >&2
                        return 1
                    fi

                    value=${value//++/\"}
                    values[$index]=$value

                else
                    echo 'build-index: for key' $1 'in' $2',' \
                        'closing quote not found' >&2
                    return 1
                fi

            else
                # If the value isn't quoted, it can't start with a '@' or
                # contain a ':'
                if [[ $value[1] == '@' ]]; then
                    echo 'build-index: for key' $1 'in' $2',' \
                        "value begins with '@'" >&2
                    return 1
                elif [[ $value =~ ':' ]]; then
                    echo 'build-index: for key' $1 'in' $2',' \
                        'value contains nested key/value pair' >&2
                    return 1
                fi
            fi

            index=$(( index + 1 ))
        done
    fi

    # }}}3

    # Split keywords one more time at commas, like Pandoc's YAML parser does
    if [[ $1 == 'keywords' ]]; then
        values=( ${(s:,:)${(j:,:)values}} )
        index=1
        for value in $values; do
            value=${${value##[[:space:]]#}%%[[:space:]]#}
            values[$index]=$value
            index=$(( index + 1 ))
        done
    fi

    print -l -- ${values//[[:space:]]##/ }

# }}}2
}

# {{{1 Build an index file for every keyword found in notes

cd $HOME/Documents/Notes || exit 1

setopt extended_glob

declare -A blocks
declare -a file_keywords
declare -Ua all_keywords
declare -A keywords

declare file
for file in *.md; do
    _get_block $file
    file_keywords=( ${(f)"$(_parse_block keywords $file)"} )
    all_keywords+=( $file_keywords )
    keywords[$file]=${(j:++:)file_keywords}
done

declare index_file
declare -a block
declare -a files
declare title
declare link

declare keyword
for keyword in $all_keywords; do
    index_file=${keyword:gs/ /_}_index.md

    if [[ -f $index_file ]]; then
        block=( '\-\-\-' ${(s:++:)blocks[$index_file]} '\-\-\-\n' )
    else
        block=(
            '\-\-\-'
            'id: '${index_file%.md}
            'title: '$keyword
            'keywords:'
            '\-\-\-\n'
        )
    fi

    print -l $block > $index_file

    files=( ${(k)keywords[(R)(*$keyword++*)|(*++$keyword*)|($keyword)]} )

    for file in $files; do
        title="$(_parse_block title $file)"
        link='['$title']['$file']'
        echo $link
    done | sort --ignore-case >> $index_file
done

# }}}1
