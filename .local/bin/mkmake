#!/bin/zsh

# Generate a makefile suitable for the desired Pandoc workflow.

# Process options {{{1

# Initialize arrays {{{2

latex_deps=(
  '$(input)'
  '$(latex_defaults)'
  '${USERDATA}/defaults/all.yaml'
  '${USERDATA}/custom/latex.lua'
  '${USERDATA}/metadata/latex.yaml'
  '${USERDATA}/templates/custom.latex'
  '${TEXMFHOME}/tex/latex/rhelder/rhelder.sty'
)

html_deps=(
  '$(input)'
  '$(html_defaults)'
  '${USERDATA}/defaults/all.yaml'
  '${USERDATA}/metadata/html.yaml'
  '${USERDATA}/templates/default.html5'
  '${USERDATA}/templates/styles.html'
)

declare -a latex_opts
declare -a html_opts
declare -a project_metadata
declare -a file_metadata
declare -a project_defaults

# Add to arrays {{{2
while getopts 'shcm:d:' flag; do
  case $flag in
    (s)
      latex_deps+='${TEXMFHOME}/tex/latex/rheldersyllabus/rheldersyllabus.cls'
    ;;
    (h)
      latex_deps+='${TEXMFHOME}/tex/latex/rhelderhandout/rhelderhandout.cls'
    ;;
    (c)
      latex_opts+='--biblatex'
      latex_deps+='${TEXMFHOME}/bibtex/bib/my_library.bib'
      html_opts+='--citeproc'
      html_deps+=(
        '${USERDATA}/templates/styles.citations.html'
        '${USERDATA}/csl/chicago-author-date-shorttitles.csl'
        '${USERDATA}/my_library.json'
      )
    ;;
    (+c)
      latex_opts+='--biblatex'
      latex_deps+='${TEXMFHOME}/bibtex/bib/my_library.bib'
      html_opts+='--citeproc'
      html_deps+=(
        '${USERDATA}/templates/styles.citations.html'
        '${USERDATA}/csl/chicago-fullnote-bibliography-short-title-subsequent.csl'
        '${USERDATA}/my_library.json'
      )
    ;;
    (m)   project_metadata+=$OPTARG;;
    (+m)  file_metadata+=$OPTARG;;
    (d)   project_defaults+=$OPTARG;;
  esac
done
shift $(( OPTIND - 1 ))

# Determine what the output files will be {{{2
# (Depending on whether or not '+m' was passed)

declare -A latex_output
declare -A html_output

if [[ ! -n $file_metadata ]]; then
  latex_output[latex_output]='$(input:.md=.tex)'
else
  for file in $file_metadata; do
    id=${file%.yaml}
    latex_output[latex_output_$id]='$(input:.md=_'$id'.tex)'
  done
fi

if [[ ! -n $file_metadata ]]; then
  html_output[html_output]='$(input:.md=.html)'
else
  for file in $file_metadata; do
    id=${file%.yaml}
    html_output[html_output_$id]='$(input:.md=_'$id'.html)'
  done
fi
# }}}2

# Assemble the text {{{1

# Define utility functions {{{2

function set_or_append_keys {
  local sep=' := '
  for key in ${(Pko)1}; do
    makefile+=${1}${sep}'$('${key}')'
    sep=' += '
  done
}

function set_or_append_vals {
  local sep=' := '
  for val in ${(P)1}; do
    makefile+=${1}${sep}${val}
    sep=' += '
  done
}
# }}}2

makefile=(
  'USERDATA := ${XDG_DATA_HOME}/pandoc'
  'TEXMFHOME := $(shell kpsewhich -var-value TEXMFHOME)'
  ''
  'input := $(wildcard *.md)'
  ''
  'latex_defaults := ${USERDATA}/defaults/latex.yaml'
  'html_defaults := ${USERDATA}/defaults/html.yaml'
  ''
)

# Define variables for all LaTeX output filenames
for varname in ${(ko)latex_output}; do
  makefile+=$varname' := '$latex_output[$varname]
done

# If there is more than one output filename, set 'latex_output' equal to all of
# them
if (( $#latex_output > 1 )); then
  set_or_append_keys latex_output

  makefile+=''
fi

# Define variables for all HTML output filenames
for varname in ${(ko)html_output}; do
  makefile+=$varname' := '$html_output[$varname]
done

# If there is more than one output filename, set 'html_output' equal to all of
# them
if (( $#html_output > 1 )); then
  set_or_append_keys html_output
fi

makefile+=''

set_or_append_vals latex_deps

makefile+=''

set_or_append_vals html_deps

makefile+=''

set_or_append_vals project_metadata

if [[ -n $project_metadata ]]; then
  makefile+=(
    'latex_deps += $(project_metadata)'
    'html_deps += $(project_metadata)'
    ''
  )
fi

set_or_append_vals project_defaults

if [[ -n $project_defaults ]]; then
  makefile+=(
    'latex_deps += $(project_defaults)'
    'html_deps += $(project_defaults)'
    ''
  )
fi

makefile+=(
  'all: $(latex_output) $(html_output)'
  ''
)

for ((i=1; i <= $#latex_output; ++i)); do
  if [[ -n ${(o)file_metadata[i]} ]]; then
    thisfile_metadata=' '${(o)file_metadata[i]}
  fi

  makefile+='$('${${(ko)latex_output}[i]}'): $(latex_deps)'$thisfile_metadata
  makefile+='	pandoc --defaults=$(latex_defaults) \'
  for opt in $latex_opts; do
    makefile+='		'$opt' \'
  done
  makefile+='		--output=$('${${(ko)latex_output}[i]}') \'
  if [[ -n $project_defaults ]]; then
    makefile+='		--defaults='$project_defaults' \'
  fi
  makefile+='		$(project_metadata)'$thisfile_metadata' \'
  makefile+='		$(input)'
done

makefile+=''

for ((i=1; i <= $#html_output; ++i)); do
  if [[ -n ${(o)file_metadata[i]} ]]; then
    thisfile_metadata=' '${(o)file_metadata[i]}
  fi

  makefile+='$('${${(ko)html_output}[i]}'): $(html_deps)'$thisfile_metadata
  makefile+='	pandoc --defaults=$(html_defaults) \'
  for opt in $html_opts; do
    makefile+='		'$opt' \'
  done
  makefile+='		--output=$('${${(ko)html_output}[i]}') \'
  if [[ -n $project_defaults ]]; then
    makefile+='		--defaults='$project_defaults' \'
  fi
  makefile+='		$(project_metadata)'$thisfile_metadata' \'
  makefile+='		$(input)'
done

print -l "${(@)makefile}"

# }}}1
