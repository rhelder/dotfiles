# Before autoloading, check whether or not name is already defined as a
# command, function, alias, etc. If not, let `autoload` act as normal. Also
# undefine function before autoloading so that any changes made to the function
# can be loaded after user sources `.zshrc`.
#
# To use this function, put `autoload` in your `FPATH` and include the
# following lines in your `.zshrc`:
#
# declare -gi autoload_zshrc_sourced=0
# if [[ $(whence -w autoload) == 'autoload: function' ]]; then
    # autoload -f autoload
# else
    # autoload autoload
# fi

local -a flags=()
while getopts 'fRTUXdkmrtWz' flag; do
    case $flag in
        (f)     local -i force=1;;
        (R)     flags+=( '-R' );;
        (+R)    flags+=( '+R' );;
        (T)     flags+=( '-T' );;
        (+T)    flags+=( '+T' );;
        (U)     flags+=( '-U' );;
        (+U)    flags+=( '+U' );;
        (X)     flags+=( '-X' );;
        (+X)    flags+=( '+X' );;
        (d)     flags+=( '-d' );;
        (+d)    flags+=( '+d' );;
        (k)     flags+=( '-k' );;
        (+k)    flags+=( '+k' );;
        (m)     local -i mopt=1; flags+=( '-m' );;
        (+m)    local -i mopt=1; flags+=( '+m' );;
        (r)     flags+=( '-r' );;
        (+r)    flags+=( '+r' );;
        (t)     flags+=( '-t' );;
        (+t)    flags+=( '+t' );;
        (W)     flags+=( '-W' );;
        (+W)    flags+=( '+W' );;
        (z)     flags+=( '-z' );;
        (+z)    flags+=( '+z' );;
    esac
done
shift $(( OPTIND - 1 ))

# If no argument is provided, the `{+|-}m` flag is present (and KSH_AUTOLOAD is
# not set), or the `-f` flag is present, run the `autoload` builtin like normal
if [[ ! $1 || ( mopt -eq 1 && ! -o KSH_AUTOLOAD ) ]]; then
    builtin autoload $flags $*

elif (( force == 1 )); then
    # If the `-f` flag is present, also undefine the function first, so
    # that any changes made to a function can be loaded the next time the
    # function is called after `.zshrc` is re-sourced
    for name in $*; do
        [[ $(typeset -f $name) ]] && unfunction $name
    done
    builtin autoload $flags $*

else
    # If `autoload` is being called in `.zshrc`, and `autoload_zshrc_sourced`
    # is zero or is not set, then that means `.zshrc` is being sourced at
    # startup or re-sourced by the user. To prevent an error being thrown for
    # every function autoloaded in `.zshrc` when `.zshrc` is re-sourced, and so
    # that any changes made to a function can be loaded the next time the
    # function is called after `.zshrc` is re-sourced, undefine all functions
    # in `.zshrc`. Clear the `autoload_zshrc_functions` array so that it can be
    # rebuilt as `.zshrc` is sourced.
    if (( autoload_zshrc_sourced == 0 )); then
        if [[ $funcfiletrace[(r)$XDG_CONFIG_HOME/zsh/.zshrc*] ]]; then
            if [[ $autoload_zshrc_functions ]]; then
                unfunction $autoload_zshrc_functions
            fi
            declare -ga autoload_zshrc_functions=()
            autoload_zshrc_sourced=1
        fi
    fi

    # Check to see if there is another command, function, alias, etc. by the
    # same name before autoloading the function
    local name
    for name in $*; do
        if [[ $(whence $name) ]]; then
            echo 'autoload:' $name 'already defined' >&2
            return 1
        else
            builtin autoload $flags $name
            if [[ $funcfiletrace[(r)$XDG_CONFIG_HOME/zsh/.zshrc*] ]]; then
                autoload_zshrc_functions+=( $name )
            fi
        fi
    done
fi
