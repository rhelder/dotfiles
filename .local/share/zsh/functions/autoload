# Before autoloading, check whether or not the arguments are already a command,
# function, alias, etc. If not, let 'autoload' act as builtin 'autload', with
# two exceptions:
#
# * 'unfunction' before autoloading so that any changes made to the function
#   can be loaded the next time the function is called.
# * Keep track of user functions autoloaded in '.zshrc'. These will be
#   unfunctioned by 'autoload_init' when '.zshrc' is sourced, so that
#   'autoload' won't throw an error for each user function in '.zshrc' every
#   time '.zshrc' is re-sourced, and so that changes to a user function can be
#   loaded the next time the function is called just by re-sourcing '.zshrc'.

local -a flags
local flag
while getopts 'fRTUXdkmrtWz' flag; do
    case $flag in
        (f)     local -i force=1;;
        (R)     flags+=( '-R' );;
        (+R)    flags+=( '+R' );;
        (T)     flags+=( '-T' );;
        (+T)    flags+=( '+T' );;
        (U)     flags+=( '-U' );;
        (+U)    flags+=( '+U' );;
        (X)     flags+=( '-X' );;
        (+X)    flags+=( '+X' );;
        (d)     flags+=( '-d' );;
        (+d)    flags+=( '+d' );;
        (k)     flags+=( '-k' );;
        (+k)    flags+=( '+k' );;
        (m)     local -i mopt=1; flags+=( '-m' );;
        (+m)    local -i mopt=1; flags+=( '+m' );;
        (r)     flags+=( '-r' );;
        (+r)    flags+=( '+r' );;
        (t)     flags+=( '-t' );;
        (+t)    flags+=( '+t' );;
        (W)     flags+=( '-W' );;
        (+W)    flags+=( '+W' );;
        (z)     flags+=( '-z' );;
        (+z)    flags+=( '+z' );;
    esac
done
shift $(( OPTIND - 1 ))

if [[ ! ( -n $* || -n $flags ) || -n $mopt ]]; then
    builtin autoload $flags -- $*
    return $?

elif [[ -n $flags[(r)-X] ]]; then
    # 'autoload -X' is only allowed in shell functions. Wrap 'autoload -X' in
    # the function that called 'autoload -X', then execute the function (if
    # 'autoload -X' is invoked directly here, it will load and execute the
    # definition of *this* 'autoload' function!)
    function $funcstack[2] {
        builtin autoload $flags -- $*
    }
    $funcstack[2] $*
    return $?
fi

local name
local zshrc_line_number=$funcfiletrace[(r)$XDG_CONFIG_HOME/zsh/.zshrc*]
local -i exit_status

for name in $*; do
    if [[ -z $(whence $name) || -n $force ]]; then
        typeset -f $name > /dev/null && unfunction $name
        builtin autoload $flags -- $name || exit_status=$?

        # Keep track of user functions called in '.zshrc'. These will be
        # unfunctioned when 'autoload_init' is called in '.zshrc'.
        if [[ -f $XDG_DATA_HOME/zsh/functions/$name &&
                -n $zshrc_line_number ]]; then
            autoload_zshrc_user_functions+=$name
        fi

        continue
    fi

    if [[ -n $zshrc_line_number ]]; then
        echo 'autoload:'${zshrc_line_number}':' $name 'already defined' >&2
    else
        echo 'autoload:' $name 'already defined' >&2
    fi

    exit_status=1
    continue
done

return $exit_status
