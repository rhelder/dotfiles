# Before aliasing, check whether or not name is already used for a command,
# function, alias, etc. If not, let 'alias' act as builtin 'alias', with one
# exception: keep track of aliases defined in '.zshrc'. These will be unaliased
# when 'alias_init' is called if '.zshrc' is re-sourced, so that an error isn't
# thrown for every alias already defined in '.zshrc'.

local -a flags
local flag
while getopts 'fgmsrL' flag; do
    case $flag in
        (f)     local -i force=1;;
        (g)     flags+=( '-g' );;
        (+g)    flags+=( '+g' );;
        (m)     local -i mopt=1; flags+=( '-m' );;
        (+m)    local -i mopt=1; flags+=( '+m' );;
        (s)     flags+=( '-s' );;
        (+s)    flags+=( '+s' );;
        (r)     flags+=( '-r' );;
        (+r)    flags+=( '+r' );;
        (L)     local -i Lopt=1; flags+=( '-L' );;
        (+L)    local -i Lopt=1; flags+=( '+L' );;
    esac
done
shift $(( OPTIND - 1 ))

if [[ ! -n $* || -n $mopt || -n $Lopt ]]; then
    builtin alias $flags -- $*
    return $?
fi

local arg
local name
local zshrc_line_number=$funcfiletrace[(r)$XDG_CONFIG_HOME/zsh/.zshrc*]
local -i exit_status

for arg in $*; do
    if [[ ! $arg =~ [^[:space:]]+=.* ]]; then
        builtin alias $flags -- $arg || exit_status=$?
        continue
    fi

    name=${arg%%=*}
    if [[ -z $(whence $name) || -n $force ]]; then
        builtin alias $flags -- $arg

        # Keep track of aliases defined in '.zshrc'. These will be unaliased
        # when 'alias_init' is called in '.zshrc'.
        [[ -n $zshrc_line_number ]] && alias_zshrc_sourced_aliases+=$name
        continue
    fi

    if [[ -n $zshrc_line_number ]]; then
        echo 'alias:'${zshrc_line_number}':' $name 'already defined' >&2
    else
        echo 'alias:' $name 'already defined' >&2
    fi

    exit_status=1
    continue
done

return $exit_status
