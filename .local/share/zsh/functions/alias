# Before aliasing, check whether or not name is already defined as a command,
# function, alias, etc. If not, let 'alias' act as normal builtin 'alias'.

local -a flags
while getopts 'cfgmsrL' flag; do
    case $flag in
        (c)     local -i config=1;;
        (f)     local -i force=1;;
        (g)     flags+=( '-g' );;
        (+g)    flags+=( '+g' );;
        (m)     local -i mopt=1; flags+=( '-m' );;
        (+m)    local -i mopt=1; flags+=( '+m' );;
        (s)     flags+=( '-s' );;
        (+s)    flags+=( '+s' );;
        (r)     flags+=( '-r' );;
        (+r)    flags+=( '+r' );;
        (L)     flags+=( '-L' );;
        (+L)    flags+=( '+L' );;
    esac
done
shift $(( OPTIND - 1 ))

if [[ ! -n $* || $mopt -eq 1 ]]; then
    builtin alias $flags $*
    return $?
fi

# Keep track of aliases with the '-c' option so that they aren't flagged as
# 'already defined' every time '.zshrc' is re-sourced
declare -Uga alias_sourced_zshrc_aliases

local -i exit_status
local name
local arg
for arg in $*; do
    name="${arg%%=*}"
    if [[
        -z $(whence $name) ||
        -n $alias_sourced_zshrc_aliases[(r)$name] ||
        -n $force
    ]]; then
        [[ -n $config ]] && alias_sourced_zshrc_aliases+=$name

        builtin alias $flags $*
        continue
    fi

    local zshrc_line_number=$funcfiletrace[(r)$XDG_CONFIG_HOME/zsh/.zshrc*]
    if [[ -n $zshrc_line_number ]]; then
        echo 'alias:'${zshrc_line_number}':' $name 'already defined' >&2
    else
        echo 'alias:' $name 'already defined' >&2
    fi
    exit_status=1
    continue
done

return $exit_status
