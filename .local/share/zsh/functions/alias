# Before aliasing, check whether or not name is already defined as a command or
# an alias before aliasing. Otherwise, let `alias` act as normal.

local flags=()
while getopts 'fgmsrL' flag; do
    case $flag in
        (f)     local force=1;;
        (g)     flags+='-g';;
        (+g)    flags+='+g';;
        (m)     local mopt=1; flags+='-m';;
        (+m)    local mopt=1; flags+='+m';;
        (s)     flags+='-s';;
        (+s)    flags+='+s';;
        (r)     flags+='-r';;
        (+r)    flags+='+r';;
        (L)     flags=+'-L';;
        (+L)    flags=+'+L';;
    esac
done
shift $(( OPTIND - 1 ))

# If no argument is provided, the `{+|-}m` flag is present, or the `-f`
# flag is present, run the `alias` builtin like normal
if [[ ! $1 || $mopt -eq 1 || $force -eq 1 ]]; then
    builtin alias $flags $1

else
    # Otherwise, check to see if there is another command, function, alias,
    # etc. by the same name before defining the alias
    local name="${1%%=*}"
    local result=$(whence -v $name)

    # If the name is 'not found', define the alias as normal
    if [[ $result =~ "$name not found" ]]; then
        builtin alias $flags $1

    else
        # If the result is an alias, only print an error message and return if
        # an alias by the same name has been defined earlier in `.zshrc`.
        # Otherwise, `alias` will throw an error for every existing alias in
        # `.zshrc` whenever `.zshrc` is re-sourced, and it will refuse to
        # redefine existing aliases that the user is trying to change. This
        # way, an error only occurs if the user tries to use the same alias
        # name twice. Right now, aliases are only defined in `.zshrc` (with the
        # exception of `which-command`, which I don't care about), so only
        # `.zshrc` is checked.
        if [[ $result =~ "$name is an alias" ]]; then
            if [[ $(cat $XDG_CONFIG_HOME/zsh/.zshrc |
                head -$(( ${funcfiletrace[(r)*zshrc*]##*:} - 1 )) |
                grep "alias $name=") ]]; then
                echo $name 'already defined' >&2
                return 1
            else
                builtin alias $flags $1
            fi

        else
            # If the result is anything other than an alias, print an error
            # message and return
            echo $name 'already defined' >&2
            return 1
        fi
    fi
fi
