# Before aliasing, check whether or not name is already defined as a command,
# function, alias, etc. If not, let `alias` act as normal builtin `alias`.

local flags=()
while getopts 'fgmsrL' flag; do
    case $flag in
        (f)     local -i force=1;;
        (g)     flags+=( '-g' );;
        (+g)    flags+=( '+g' );;
        (m)     local -i mopt=1; flags+=( '-m' );;
        (+m)    local -i mopt=1; flags+=( '+m' );;
        (s)     flags+=( '-s' );;
        (+s)    flags+=( '+s' );;
        (r)     flags+=( '-r' );;
        (+r)    flags+=( '+r' );;
        (L)     flags+=( '-L' );;
        (+L)    flags+=( '+L' );;
    esac
done
shift $(( OPTIND - 1 ))

# If no argument is provided, the `{+|-}m` flag is present, or the `-f` flag is
# present, run the `alias` builtin like normal
if [[ ! $* || $mopt -eq 1 || $force -eq 1 ]]; then
    builtin alias $flags $*

else
    # Check to see if there is another command, function, alias, etc. by the
    # same name before defining the alias

    # Keep track of aliases defined in `.zshrc` so that these aren't flagged as
    # 'already defined' every time `.zshrc` is re-sourced
    declare -Uga autoload_zshrc_aliases

    declare zshrc_line_number=$funcfiletrace[(r)$XDG_CONFIG_HOME/zsh/.zshrc*]
    [[ -n $zshrc_line_number ]] && integer in_zshrc=1

    local name
    for arg in $*; do
        name="${arg%%=*}"
        if [[ -n $autoload_zshrc_aliases[(r)$name] ]]; then
            integer prev_in_zshrc=1
        fi

        if [[ $(whence $name) ]]; then
            if [[ -n $in_zshrc && ! -n $prev_in_zshrc ]]; then
                echo 'alias:'${zshrc_line_number}':'\
                    $name 'already defined' >&2
                return 1
            elif [[ ! -n $in_zshrc ]]; then
                echo 'alias:'${zshrc_line_number}':'\
                    $name 'already defined' >&2
                return 1
            fi
        fi

        [[ -n $in_zshrc ]] && autoload_zshrc_aliases+=( $name )
        builtin alias $flags $arg
    done
fi
